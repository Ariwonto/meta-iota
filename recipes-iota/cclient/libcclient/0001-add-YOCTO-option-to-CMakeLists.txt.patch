From 99aeca06ac583fcf1c4eb07d20ba291c028fec66 Mon Sep 17 00:00:00 2001
From: bernardo <bernardoaraujor@gmail.com>
Date: Mon, 28 Oct 2019 22:24:04 +0100
Subject: [PATCH] add-YOCTO-option-to-CMakeLists

---
 CMakeLists.txt         | 53 ++++++++++++++++++++++++++++----------------------
 cclient/CMakeLists.txt | 45 +++++++++++++++++++++++++++---------------
 2 files changed, 59 insertions(+), 39 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d5444f6..0981a57 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,6 +25,7 @@ find_package(Threads REQUIRED)
 # default CLI options
 option(CCLIENT "Enable CClient library" ON)
 option(CCLIENT_TEST "Enable CClient library test cases" ON)
+option (YOCTO "Enable Building in Yocto" OFF)
 
 # PCurl configuration flags
 option(PCURL_SBOX_UNWIND_2 "Unwind 2 rounds of PCurl sbox" ON)
@@ -32,7 +33,9 @@ option(PCURL_SBOX_UNWIND_4 "Unwind 4 rounds of PCurl sbox" OFF)
 option(PCURL_SBOX_UNWIND_8 "Unwind 8 rounds of PCurl sbox" OFF)
 option(PCURL_STATE_DOUBLE "Use PCurl double state; PCurl short state optimization is enabled by default" OFF)
 
-include(ExternalProject)
+if(NOT YOCTO)
+  include(ExternalProject)
+endif()
 
 # we compile and install entangled all dependencies in a sandbox instead of system dirs.
 # change the default without overriding a user-provided value
@@ -49,19 +52,21 @@ include_directories(
 # libs in the sandbox
 link_directories("${CMAKE_INSTALL_PREFIX}/lib")
 
-set(EXTERNAL_BUILD_DIR "${PROJECT_BINARY_DIR}/external")
-set(EXTERNAL_DOWNLOAD_DIR "${PROJECT_BINARY_DIR}/download")
-set(EXTERNAL_INSTALL_DIR "${PROJECT_BINARY_DIR}/install")
-set(EXTERNAL_INSTALL_BIN_DIR "${PROJECT_BINARY_DIR}/install/bin")
-set(EXTERNAL_INCLUDE_DIR "${EXTERNAL_INSTALL_DIR}/include")
-set(EXTERNAL_LINK_LIBS "")
-
-# external libs
-include(cmake/embear_logger.cmake)
-include(cmake/keccak.cmake)
-include(cmake/mbedtls.cmake)
-include(cmake/unity.cmake)
-include(cmake/uthash.cmake)
+if(NOT YOCTO)
+  set(EXTERNAL_BUILD_DIR "${PROJECT_BINARY_DIR}/external")
+  set(EXTERNAL_DOWNLOAD_DIR "${PROJECT_BINARY_DIR}/download")
+  set(EXTERNAL_INSTALL_DIR "${PROJECT_BINARY_DIR}/install")
+  set(EXTERNAL_INSTALL_BIN_DIR "${PROJECT_BINARY_DIR}/install/bin")
+  set(EXTERNAL_INCLUDE_DIR "${EXTERNAL_INSTALL_DIR}/include")
+  set(EXTERNAL_LINK_LIBS "")
+
+  # external libs
+  include(cmake/embear_logger.cmake)
+  include(cmake/keccak.cmake)
+  include(cmake/mbedtls.cmake)
+  include(cmake/unity.cmake)
+  include(cmake/uthash.cmake)
+endif()
 
 # subdirs
 if(${CCLIENT})
@@ -189,15 +194,17 @@ endif()
 
 add_library(entangled::common ALIAS common)
 target_include_directories(common PUBLIC ${PROJECT_SOURCE_DIR})
-add_dependencies(common
-  ext_uthash
-  ext_keccak
-  ext_embear_logger
-  ext_mbedtls
-)
-
-list(APPEND EXTERNAL_LINK_LIBS "${EXTERNAL_LINK_LIBS}" Threads::Threads)
-target_link_libraries(common PUBLIC "${EXTERNAL_LINK_LIBS}")
+if(NOT YOCTO)
+  add_dependencies(common
+    ext_uthash
+    ext_keccak
+    ext_embear_logger
+    ext_mbedtls
+  )
+
+  list(APPEND EXTERNAL_LINK_LIBS "${EXTERNAL_LINK_LIBS}" Threads::Threads)
+  target_link_libraries(common PUBLIC "${EXTERNAL_LINK_LIBS}")
+endif()
 
 # install
 install(TARGETS common DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
diff --git a/cclient/CMakeLists.txt b/cclient/CMakeLists.txt
index 3f4c2e6..f60eb04 100644
--- a/cclient/CMakeLists.txt
+++ b/cclient/CMakeLists.txt
@@ -6,9 +6,11 @@ Refer to the LICENSE file for licensing information
 ]]
 
 # external libraries
-include(../cmake/cjson.cmake)
-include(../cmake/http_parser.cmake)
-include(../cmake/unity.cmake)
+if(NOT YOCTO)
+  include(../cmake/cjson.cmake)
+  include(../cmake/http_parser.cmake)
+  include(../cmake/unity.cmake)
+endif()
 
 #==============cclient source=====================
 set(API_CORE_DIR "api/core")
@@ -132,18 +134,29 @@ add_library(cclient
 
 add_library(entangled::cclient ALIAS cclient)
 
-add_dependencies(cclient
-  entangled::common
-  ext_cjson
-  ext_http_parser
-)
-
-target_link_libraries(cclient PUBLIC
-  common
-  ${EXTERNAL_LINK_LIBS}
-  ${EXT_LIB_UNITY}
-  Threads::Threads
-)
+if(NOT YOCTO)
+  add_dependencies(cclient
+    entangled::common
+    ext_cjson
+    ext_http_parser
+  )
+
+  target_link_libraries(cclient PUBLIC
+    common
+    ${EXTERNAL_LINK_LIBS}
+    ${EXT_LIB_UNITY}
+    Threads::Threads
+  )
+else()
+  add_dependencies(cclient
+    entangled::common
+  )
+
+  target_link_libraries(cclient PUBLIC
+    common
+    Threads::Threads
+  )
+endif()
 
 install(TARGETS cclient DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
 install(DIRECTORY "${PROJECT_SOURCE_DIR}/cclient/" DESTINATION "${CMAKE_INSTALL_PREFIX}/include/entangled/cclient" FILES_MATCHING PATTERN "*.h")
@@ -188,4 +201,4 @@ endif()
 
 if(${RPI_CROSS_COMPILATION})
   set_property(TARGET cclient PROPERTY C_STANDARD 99)
-endif()
\ No newline at end of file
+endif()
-- 
2.7.4

